<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="deploying-your-webapp-136"><title>Deploying your Webapp</title><conbody><p id="136-intro1">I can't speak for others, but I personally prefer programming to system administration. But the fact is that, eventually, you need to serve your app somehow, and odds are that you'll need to be the one to set it up.</p><p id="136-intro2">There are some promising initiatives in the Haskell web community towards making deployment easier. In the future, we may even have a service that allows you to deploy your app with a single command.</p><p id="136-intro3">But we're not there yet. And even if we were, such a solution will never work for everyone. This chapter covers the different options you have for deployment, and gives some general recommendations on what you should choose in different situations.</p></conbody><concept id="compiling-137"><title>Compiling</title><conbody>
  <p id="137-x-3">First things first: how do you build your production application? If you're using the
   scaffolded site, it's as simple as <codeph id="137-x-4">cabal build</codeph>. I also recommend cleaning
   beforehand to make sure there is no cached information, so a simple combination to build your
   executable is:</p>
  <codeblock id="137-x-5" outputclass="shell">cabal clean &amp;&amp; cabal configure &amp;&amp; cabal build</codeblock>
 </conbody></concept><concept id="warp-138"><title>Warp</title><conbody><p id="138-warp1">As we have mentioned before, Yesod is built on the Web Application Interface (WAI), allowing it to run on any WAI backend. At the time of writing, the following backends are available:</p><ul id="138-x1"><li id="138-x2">Warp</li><li id="138-x3">FastCGI</li><li id="138-x4">SCGI</li><li id="138-x5">CGI</li><li id="138-x6">Webkit</li><li id="138-x7">Development server</li></ul><p id="138-warp2">The last two are not intended for production deployments. Of the remaining four, all
            can be used for production deployment in theory. In practice, a CGI backend will likely
            be horribly inefficient, since a new process must be spawned for each connection. And
            SCGI is not nearly as well supported by frontend web servers as Warp (via reverse
            proxying) or FastCGI.</p><p id="138-warp3">So between the two remaining choices, Warp gets a very strong recommendation because:</p><ul id="138-x8"><li id="138-x9">It is significantly faster.</li><li id="138-x10">Like FastCGI, it can run behind a frontend server like Nginx, using reverse HTTP proxy.</li><li id="138-x11">In addition, it is a fully capable server of its own accord, and can therefore be used without any frontend server.</li></ul>
        <p id="138-x-3">So that leaves one last question: should Warp run on its own, or via reverse proxy behind
            a frontend server? For most use cases, I recommend the latter, because:</p>
        <ul id="138-ul_lyw_tha_af">
            <li id="138-x-4">As fast as Warp is, it is still optimized as an application server, not a static
                file server.</li>
            <li id="138-x-5">Using Nginx, you can set up virtual hosting to serve your static contents from a
                separate domain. (It's possible to do this with Warp, but a bit more involved).</li>
            <li id="138-x-6">You can use Nginx as either a load balancer or a SSL proxy. (Though with
                    <apiname id="138-x-7">warp-tls</apiname> it's entirely possible to run an https site on Warp
                alone.)</li>
        </ul>
        <p id="138-x-8">So my final recommendation is: set up Nginx to reverse proxy to Warp.</p>
        <note id="138-x-9">A number of people in the Yesod community disagree with me here, and believe that the
            increased performance and decreased complexity of skipping the Nginx step make
            standalone Warp a better choice. Feel free to follow either approach, they are both
            perfectly valid.</note></conbody><concept id="configuration-139"><title>Configuration</title><conbody><p id="139-config1">In general, Nginx will listen on port 80 and your Yesod/Warp app will listen on some unprivileged port (lets say 4321). You will then need to provide a nginx.conf file, such as:</p><codeblock outputclass="nginx-conf" id="139-x1">daemon off; # Don't run nginx in the background, good for monitoring apps
events {
    worker_connections 4096;
}

http {
    server {
        listen 80; # Incoming port for Nginx
        server_name www.myserver.com;
        location / {
            proxy_pass http://127.0.0.1:4321; # Reverse proxy to your Yesod app
        }
    }
}</codeblock><p id="139-config2">You can add as many server blocks as you like. A common addition is to ensure users always access your pages with the www prefix on the domain name, ensuring the RESTful principle of canonical URLs. (You could just as easily do the opposite and always strip the www, just make sure that your choice is reflected in both the nginx config and the approot of your site.) In this case, we would add the block:</p><codeblock outputclass="nginx-conf" id="139-x2">server {
    listen 80;
    server_name myserver.com;
    rewrite ^/(.*) http://www.myserver.com/$1 permanent;
}</codeblock><p id="139-config3">A highly recommended optimization is to serve static files from a separate domain
            name, therefore bypassing the cookie transfer overhead. Assuming that our static files
            are stored in the <codeph id="139-x3">static</codeph> folder within our site folder, and the
            site folder is located at <codeph id="139-x4">/home/michael/sites/mysite</codeph>, this
            would look like:</p><codeblock outputclass="nginx-conf" id="139-x5">server {
    listen 80;
    server_name static.myserver.com;
    root /home/michael/sites/mysite/static;
    # Since yesod-static appends a content hash in the query string,
    # we are free to set expiration dates far in the future without
    # concerns of stale content.
    expires max;
}</codeblock><p id="139-config4">In order for this to work, your site must properly rewrite static URLs to this
            alternate domain name. The scaffolded site is set up to make this fairly simple via the
                <codeph id="139-x-3">Settings.staticRoot</codeph> function and the definition of
                <codeph id="139-x-4">urlRenderOverride</codeph>. However, if you just want to get the benefit of
            nginx's faster static file serving without dealing with separate domain names, you can
            instead modify your original server block like so:</p><codeblock outputclass="nginx-conf" id="139-x6">server {
    listen 80; # Incoming port for Nginx
    server_name www.myserver.com;
    location / {
        proxy_pass http://127.0.0.1:4321; # Reverse proxy to your Yesod app
    }
    location /static {
        root /home/michael/sites/mysite; # Notice that we do *not* include /static
        expires max;
    }
}</codeblock></conbody></concept><concept id="server-process-140"><title>Server Process</title><conbody><p id="140-process1">Many people are familiar with an Apache/mod_php or Lighttpd/FastCGI kind of setup,
            where the web server automatically spawns the web application. With nginx, either for
            reverse proxying or FastCGI, this is not the case: you are responsible to run your own
            process. I strongly recommend a monitoring utility which will automatically restart your
            application in case it crashes. There are many great options out there, such as
                <apiname id="140-x-3">angel</apiname> or daemontools.</p><p id="140-process2">To give a concrete example, here is an Upstart config file. The file must be placed in <codeph id="140-x1">/etc/init/mysite.conf</codeph>:</p><codeblock outputclass="upstart-conf" id="140-x2">description "My awesome Yesod application"
start on runlevel [2345];
stop on runlevel [!2345];
respawn
chdir /home/michael/sites/mysite
exec /home/michael/sites/mysite/dist/build/mysite/mysite</codeblock><p id="140-process3">Once this is in place, bringing up your application is as simple as <codeph id="140-x3">sudo start mysite</codeph>.</p></conbody></concept></concept><concept id="fastcgi-141"><title>FastCGI</title><conbody><p id="141-fastcgi1">Some people may prefer using FastCGI for deployment. In this case, you'll need to add an extra tool to the mix. FastCGI works by receiving new connection from a file descriptor. The C library assumes that this file descriptor will be 0 (standard input), so you need to use the spawn-fcgi program to bind your application's standard input to the correct socket.</p><p id="141-fastcgi2">It can be very convenient to use Unix named sockets for this instead of binding to a port, especially when hosting multiple applications on a single host. A possible script to load up your app could be:</p><codeblock outputclass="shell" id="141-x1">spawn-fcgi \
    -d /home/michael/sites/mysite \
    -s /tmp/mysite.socket \
    -n \
    -M 511 \
    -u michael \
    -- /home/michael/sites/mysite/dist/build/mysite-fastcgi/mysite-fastcgi</codeblock><p id="141-fastcgi3">You will also need to configure your frontend server to speak to your app over FastCGI. This is relatively painless in Nginx:</p><codeblock outputclass="nginx-conf" id="141-x2">server {
    listen 80;
    server_name www.myserver.com;
    location / {
        fastcgi_pass unix:/tmp/mysite.socket;
    }
}</codeblock><p id="141-fastcgi4">That should look pretty familiar from above. The only last trick is that, with Nginx, you need to manually specify all of the FastCGI variables. It is recommended to store these in a separate file (say, fastcgi.conf) and then add <codeph id="141-x3">include fastcgi.conf;</codeph> to the end of your http block. The contents of the file, to work with WAI, should be:</p><codeblock outputclass="nginx-conf" id="141-x4">fastcgi_param  QUERY_STRING       $query_string;
fastcgi_param  REQUEST_METHOD     $request_method;
fastcgi_param  CONTENT_TYPE       $content_type;
fastcgi_param  CONTENT_LENGTH     $content_length;
fastcgi_param  PATH_INFO          $fastcgi_script_name;
fastcgi_param  SERVER_PROTOCOL    $server_protocol;
fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;
fastcgi_param  REMOTE_ADDR        $remote_addr;
fastcgi_param  SERVER_ADDR        $server_addr;
fastcgi_param  SERVER_PORT        $server_port;
fastcgi_param  SERVER_NAME        $server_name;
</codeblock></conbody></concept><concept id="desktop-142"><title>Desktop</title><conbody><p id="142-desktop1">Another nifty backend is <apiname id="142-x1">wai-handler-webkit</apiname>. This backend combines Warp and QtWebkit to create an executable that a user simply double-clicks. This can be a convenient way to provide an offline version of your application.</p><p id="142-desktop2">One of the very nice conveniences of Yesod for this is that your templates are all compiled into the executable, and thus do not need to be distributed with your application. Static files do, however.</p><note id="142-x2">There's actually support for embedding your static files directly in the executable as
            well, see the <apiname id="142-x-3">yesod-static</apiname> docs for more details.</note>
        <p id="142-x-4">A similar approach, without requiring the QtWebkit library, is
                <apiname id="142-x-5">wai-handler-launch</apiname>, which launches a Warp server and then opens
            up the user's default web browser. There's a little trickery involved here: in order to
            know that the user is still using the site, <codeph id="142-x-6">wai-handler-launch</codeph>  inserts
            a "ping" Javascript snippet to every HTML page it serves. It
                <codeph id="142-x-7">wai-handler-launch</codeph> doesn't receive a ping for two minutes, it shuts
            down.</p></conbody></concept><concept id="cgi-on-apache-143"><title>CGI on Apache</title><conbody><p id="143-cgi1">CGI and FastCGI work almost identically on Apache, so it should be fairly straight-forward to port this configuration. You essentially need to accomplish two goals:</p><ol id="143-x1"><li id="143-x2">Get the server to serve your file as (Fast)CGI.</li><li id="143-x3">Rewrite all requests to your site to go through the (Fast)CGI executable.</li></ol><p id="143-cgi2">Here is a configuration file for serving a blog application, with an executable named "bloggy.cgi", living in a subfolder named "blog" of the document root. This example was taken from an application living in the path <codeph id="143-x4">/f5/snoyman/public/blog</codeph>.</p><codeblock outputclass="apache-conf" id="143-x5">Options +ExecCGI
AddHandler cgi-script .cgi
Options +FollowSymlinks

RewriteEngine On
RewriteRule ^/f5/snoyman/public/blog$ /blog/ [R=301,S=1]
RewriteCond $1 !^bloggy.cgi
RewriteCond $1 !^static/
RewriteRule ^(.*) bloggy.cgi/$1 [L]</codeblock><p id="143-cgi3">The first RewriteRule is to deal with subfolders. In particular, it redirects a request for <codeph id="143-x6">/blog</codeph> to <codeph id="143-x7">/blog/</codeph>. The first RewriteCond prevents directly requesting the executable, the second allows Apache to serve the static files, and the last line does the actual rewriting.</p></conbody></concept><concept id="fastcgi-on-lighttpd-144"><title>FastCGI on lighttpd</title><conbody><p id="144-l1">For this example, I've left off some of the basic FastCGI settings like mime-types. I also have a more complex file in production that prepends "www." when absent and serves static files from a separate domain. However, this should serve to show the basics.</p><p id="144-l2">Here, "/home/michael/fastcgi" is the fastcgi application. The idea is to rewrite all requests to start with "/app", and then serve everything beginning with "/app" via the FastCGI executable.</p><codeblock outputclass="nginx-conf" id="144-x1">server.port = 3000
server.document-root = "/home/michael"
server.modules = ("mod_fastcgi", "mod_rewrite")

url.rewrite-once = (
  "(.*)" =&gt; "/app/$1"
)

fastcgi.server = (
    "/app" =&gt; ((
        "socket" =&gt; "/tmp/test.fastcgi.socket",
        "check-local" =&gt; "disable",
        "bin-path" =&gt; "/home/michael/fastcgi", # full path to executable
        "min-procs" =&gt; 1,
        "max-procs" =&gt; 30,
        "idle-timeout" =&gt; 30
    ))
)</codeblock></conbody></concept><concept id="cgi-on-lighttpd-145"><title>CGI on lighttpd</title><conbody><p id="145-cl1">This is basically the same as the FastCGI version, but tells lighttpd to run a file ending in ".cgi" as a CGI executable. In this case, the file lives at "/home/michael/myapp.cgi".</p><codeblock outputclass="lighttpd-conf" id="145-x1">server.port = 3000
server.document-root = "/home/michael"
server.modules = ("mod_cgi", "mod_rewrite")

url.rewrite-once = (
    "(.*)" =&gt; "/myapp.cgi/$1"
)

cgi.assign = (".cgi" =&gt; "")</codeblock></conbody></concept></concept>