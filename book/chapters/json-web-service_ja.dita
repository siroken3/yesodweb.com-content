<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="json-web-service-190"><title>JSON Web Service</title><conbody>
  <p id="190-x1">Let's create a very simple web service: it takes a JSON request and returns a JSON
            response. We're going to write the server in WAI/Warp, and the client in <apiname id="190-x-3">http-conduit</apiname>. We'll be using <apiname id="190-x2">aeson</apiname> for
            JSON parsing and rendering. We could also write the server in Yesod itself, but for such
            a simple example, the extra features of Yesod don't add much.</p>
 </conbody><concept id="server-191"><title>Server</title><conbody>
  <p id="191-x1">WAI uses the <apiname id="191-x2">conduit</apiname> package to handle streaming request
            bodies, and efficiently generates responses using <apiname id="191-x3">blaze-builder</apiname>. <apiname id="191-x4">aeson</apiname> uses <apiname id="191-x5">attoparsec</apiname> for parsing; by using <apiname id="191-x6">attoparsec-conduit</apiname> we get easy interoperability with WAI. This plays out
            as:</p>
  <codeblock outputclass="haskell" id="191-x7">{-# LANGUAGE OverloadedStrings #-}
import Network.Wai (Response, responseLBS, Application, requestBody)
import Network.HTTP.Types (status200, status400)
import Network.Wai.Handler.Warp (run)
import Data.Aeson.Parser (json)
import Data.Conduit.Attoparsec (sinkParser)
import Control.Monad.IO.Class (liftIO)
import Data.Aeson (Value, encode, object, (.=))
import Control.Exception (SomeException)
import Data.ByteString (ByteString)
import Data.Conduit (ResourceT, ($$))
import Control.Exception.Lifted (handle)

main :: IO ()
main = run 3000 app

app :: Application
app req = handle invalidJson $ do
    value &lt;- requestBody req $$ sinkParser json
    newValue &lt;- liftIO $ modValue value
    return $ responseLBS
        status200
        [("Content-Type", "application/json")]
        $ encode newValue

invalidJson :: SomeException -&gt; ResourceT IO Response
invalidJson ex = return $ responseLBS
    status400
    [("Content-Type", "application/json")]
    $ encode $ object
        [ ("message" .= show ex)
        ]

-- Application-specific logic would go here.
modValue :: Value -&gt; IO Value
modValue = return</codeblock>
 </conbody></concept><concept id="client-192"><title>Client</title><conbody>
  <p id="192-x1"><apiname id="192-x2">http-conduit</apiname> was written as a companion to WAI. It too uses
    <codeph id="192-x-3">conduit</codeph> and <codeph id="192-x-4">blaze-builder</codeph> pervasively, meaning we once again
   get easy interop with <codeph id="192-x-5">aeson</codeph>. A few extra comments for those not familiar with
    <codeph id="192-x-6">http-conduit</codeph>:</p>
  <ul id="192-ul_4be25b01-52e2-414f-ba22-d6c0b97232c8">
   <li id="192-x3">A <codeph id="192-x4">Manager</codeph> is present to keep track of open connections, so
    that multiple requests to the same server use the same connection. You usually want to use the
     <codeph id="192-x5">withManager</codeph> function to create and clean up this
     <codeph id="192-x-7">Manager</codeph>, since it is exception safe.</li>
   <li id="192-x6">We need to know the size of our request body, which can't be determined directly from
    a <codeph id="192-x-8">Builder</codeph>. Instead, we convert the <codeph id="192-x-9">Builder</codeph> into a lazy
     <codeph id="192-x-10">ByteString</codeph> and take the size from there.</li>
   <li id="192-x7">There are a number of different functions for initiating a request. We use
     <codeph id="192-x-11">http</codeph>, which allows us to directly access the data stream. There are other
    higher level functions (such as <codeph id="192-x-12">httpLbs</codeph>) that let you ignore the issues of
    sources and get the entire body directly.</li>
  </ul>
  <codeblock outputclass="haskell" id="192-x8">{-# LANGUAGE OverloadedStrings #-}
import Network.HTTP.Conduit
    ( http, parseUrl, withManager, RequestBody (RequestBodyLBS)
    , requestBody, method, Response (..)
    )
import Data.Aeson (Value (Object, String))
import Data.Aeson.Parser (json)
import Data.Conduit (($$))
import Data.Conduit.Attoparsec (sinkParser)
import Control.Monad.IO.Class (liftIO)
import Data.Aeson (encode, (.=), object)

main :: IO ()
main = withManager $ \manager -&gt; do
    value &lt;- liftIO makeValue
    -- We need to know the size of the request body, so we convert to a
    -- ByteString
    let valueBS = encode value
    req' &lt;- liftIO $ parseUrl "http://localhost:3000/"
    let req = req' { method = "POST", requestBody = RequestBodyLBS valueBS }
    Response status version headers body &lt;- http req manager
    resValue &lt;- body $$ sinkParser json
    liftIO $ handleResponse resValue

-- Application-specific function to make the request value
makeValue :: IO Value
makeValue = return $ object
    [ ("foo" .= ("bar" :: String))
    ]

-- Application-specific function to handle the response from the server
handleResponse :: Value -&gt; IO ()
handleResponse = print</codeblock>
 </conbody></concept></concept>