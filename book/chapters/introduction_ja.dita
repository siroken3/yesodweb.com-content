<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="introduction-1"><title>イントロダクション</title><conbody><p id="1-i1">Webプログラミングが始まって以来、人々は開発プロセスをより快適にしようと試みています。コミュニティとして、私たちは新しい技術を使い、いくつかのセキュリティ上の脅威、HTTPのステートレスな性質、パワフルなWebアプリケーションを開発するために複数の言語(HTML, CSS, Javascript)が必須であること等など、長らく続いている困難さに挑戦し解決を進めてきました。</p><p id="1-i2">Yesodは、プログラミング言語 Haskellの強みを利用してWeb開発プロセスを簡単にしようとしています。Haskellの強いコンパイル時の保証は型だけではありません：参照透明性が我々の意図しない副作用が存在しないことを保証してくれます。代数データ型によるパターンマッチングは、我々の想定するあらゆるケースの保証を手助けしてくれます。Haskellによる開発ではあらゆる種類のバグが消え去ることでしょう</p><p id="1-i3">残念ながら、Haskellを使うだけでは十分ではありません。Webはその性質上、型保証されて<i id="1-x1">いない</i>からです。もっとも単純な例では整数と文字列の区別がつきません：すべてのWeb上のデータは型安全性に対する最大限の努力を回避し、生のバイト列として転送されてしまうのです。したがって全てのアプリ開発者は全ての入力に対する検証作業が残されています。私はこれを<term id="1-x2">境界問題(the boundary issue)</term>と呼んでいます: あなたのアプリが内部的には型安全であるのと同じ分だけ全ての外界との境界においては依然としてサニタイズされる必要があります。</p></conbody><concept id="type-safety-2"><title>型安全性</title><conbody><p id="2-ts1">そこでYesodの出番です。ハイレベルの宣言型手法を用いることであなたが期待している正確な入力型を指定することができます。そしてそのプロセスは他の方法においても同様に動作します：型安全なURLプロセスを用いることで、あなたが送信したデータが正しく整形されていることも保証されます。</p><p id="2-ts2">境界問題はクライアントを扱う場合のみではありません：同様の問題はデータを保存したりローディングする場合にも存在します。ここでも再びYesodはデータをマーシャリング際に境界において手助けをしてくれます。あなたはエンティティをハイレベルで定義することができ、詳細を全く知らないでおくことができます。</p></conbody></concept><concept id="concise-3"><title>簡潔性</title><conbody><p id="3-c1">私達はWebアプリケーションに関連する多くの定形コードが存在していることを知っています。Yesodは可能な限りあなたの手助けとなるようにHaskellの特徴を使おうとします:</p><ul id="3-x1"><li id="3-x2">フォームライブラリは実用的な型クラスを活用することにより、一般的な場合で使用されるコード量を減らします。</li><li id="3-x3">ルーティング(Routes)は型安全性を犠牲にすることなく非常に簡潔なフォーマットで宣言されます。</li><li id="3-x4">データベースへのデータの読み書きはコード生成により自動的に処理されます。</li></ul><p id="3-c2">Yesodでは2種類のコード生成があります。プロジェクト開始時のためにファイルとディレクトリ構造を設定するための足場ツール(scaffolding tool)が提供されています。しかし、ほとんどのコード生成はメタプログラミングを通じてコンパイル時に行われます。このことはあなたが生成したコードは単純なライブラリのアップグレードがあなたの生成したコードをアップグレードしてくれるのと同様に劣化しないことを意味します。</p><p id="3-c3">しかし、これらをご自身の制御下に置きたかったり、コードが何を行うかを確実に知っている方のためにいつでもコンパイラに近い部分で実行したり、あなた自身のコードを記述することもできます。</p></conbody></concept><concept id="performance-4"><title>パフォーマンス</title><conbody><p id="4-p1">Haskellの主要なコンパイラ、GHCは驚異的な性能特性を持っており、さらなる改善が続けられています。この言語の選択によってもYesodは他の言語と比較してパフォーマンスの利点を与えられています。しかし、それだけでは十分ではありません: 私達にはパフォーマンスのためのアーキテクチャが必要です。</p><p id="4-p2">私達のテンプレートに対するアプローチはその一例です: HTML、CSS そして JavaScriptがコンパイル時に分析されるようにすることによって、Yesodは実行時においてコストのかかるディスクI/Oを回避すると同時にレンダリングを最適化することができます。しかし、アーキテクチャ上の決定はこれにとどまりません: コードが貴重なファイルハンドラや他のリソースを消耗することなく常にメモリ内で実行されることを確実にするためにライブラリ内でconduitsやビルダーのような硬度な技術を使用しています。ハイレベルの抽象化を提供していることで行動に圧縮され、適切にキャッシュされたCSSとJavaScriptを得ることができます。</p><p id="4-p3">YesodのフラグシップたるWebサーバ、WarpはHaskellによる最速のWebサーバです。この2つの技術が組み合わさった時、最速のWebアプリケーション配備のソリューションが可能となります。</p></conbody></concept><concept id="modular-5"><title>モジュール</title><conbody><p id="5-m1">Yesod (プロジェクト)はそれ自身で完結し、それらの多くがYesod外部で利用可能な数十のパッケージを生み出しました。このプロジェクトのゴールの一つはできるだけ多くコミュニティに貢献することです; あなたの次のプロジェクトでYesodを使う予定がないとしても、本書の大部分は以前としてあなたのニーズにお役に立てるかもしれません。</p><p id="5-m2">もちろんこれらのライブラリは全てうまく互いに統合できるように設計されています。Yesodフレームワークを使用すると、さまざまなAPIを通じて一貫性を強く感じることでしょう。</p></conbody></concept><concept id="a-solid-foundation-6"><title>堅牢な基盤</title><conbody><p id="6-s1">私はPHPフレームワークがUTF-8をサポートしていると宣伝しているのを一度見たことを覚えています。これには驚かされました: UTF-8のサポートは自動的に行われないことを意味しているのか?と。Haskellの世界において文字コードに関する問題はすでによく取り上げられ完全にサポートされています。実際、私達は通常逆の問題を抱えています: その問題に対して多くの強力でうまく設計されたいくつものパッケージがあるということです。Haskellコミュニティは常にクリーンでより効率的な解決策の落とし所を見つけようと努力しています。</p><p id="6-s2">このような強力なエコシステムの欠点は選択の複雑性です。Yesodを使用することでほとんどのツールはあなたのために選択済みであり、それらが一緒に動作することが保証されています。もちろん、あなたがあなたが常に独自の解決策を使用することができるオプションもあります。
</p><p id="6-s3">実際の例として、YesodとHamlet (デフォルトのテンプレート言語)はをテキストコンテンツを生成するために<apiname id="6-x1">blaze-builder</apiname>を使用しています。この選択をした理由は blaze が最速の UTF-8データを生成するインタフェースを提供するからです。他の強力なライブラリ、<apiname id="6-x2">text</apiname>, のようなライブラリを使いたいとしても問題はありません。</p></conbody></concept><concept id="introduction-to-haskell-7"><title>Haskell入門</title><conbody><p id="7-intro1">Haskellは強力で高速で方安全な関数型プログラミング言語です。この本は読者の皆様がHaskellの基礎に通じていることを前提にしています。ここにオンラインで読むことができる2つの素晴らしいHaskellを学習するための書籍があります:</p><ul id="7-x1"><li id="7-x2"><xref id="7-x3" href="http://learnyouahaskell.com" scope="external" format="html">Learn You a Haskell for Great Good!</xref></li><li id="7-x4"><xref id="7-x5" href="http://book.realworldhaskell.org/read" scope="external" format="html">Real World Haskell</xref></li></ul><p id="7-intro2">YesodはほとんどのHaskellのイントロダクション的なチュートリアルでは取り扱わない機能に依存しています。しかしながら読者の皆様はこれらがどのようにして機能するかは理解する必要はないものの、そうすることはあなたのツールが何をしているかを良く理解するきっかけとして最も良いことです。これらは次の章で取り上げます。</p></conbody></concept></concept>
