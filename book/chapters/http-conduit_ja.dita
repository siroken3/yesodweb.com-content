<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="http-conduit-249"><title>http-conduit</title><conbody>
  <p id="249-x-3">Most of Yesod is about serving content over HTTP. But that's only half the story: someone has
   to receive it. And even when you're writing a web app, sometimes that someone will be you. If you
   want to consume content from other services or interact with RESTful APIs, you'll need to write
   client code. And the recommended approach for that is <apiname id="249-x-4">http-conduit</apiname>.</p>
  <p id="249-x-5">This chapter is not directly connected to Yesod, and will be generally useful for anyone
   wanting to make HTTP requests.</p>
 </conbody><concept id="synopsis-250"><title>Synopsis</title><conbody>
  <codeblock id="250-x-3" outputclass="haskell">{-# LANGUAGE OverloadedStrings #-}
import Network.HTTP.Conduit -- the main module

-- The streaming interface uses conduits
import Data.Conduit
import Data.Conduit.Binary (sinkFile)

import qualified Data.ByteString.Lazy as L
import Control.Monad.IO.Class (liftIO)

main :: IO ()
main = do
    -- Simplest query: just download the information from the given URL as a
    -- lazy ByteString.
    simpleHttp "http://www.example.com/foo.txt" &gt;&gt;= L.writeFile "foo.txt"

    -- Use the streaming interface instead. We need to run all of this inside a
    -- ResourceT, to ensure that all our connections get properly cleaned up in
    -- the case of an exception.
    runResourceT $ do
        -- We need a Manager, which keeps track of open connections. simpleHttp
        -- creates a new manager on each run (i.e., it never reuses
        -- connections).
        manager &lt;- liftIO $ newManager def

        -- A more efficient version of the simpleHttp query above. First we
        -- parse the URL to a request.
        req &lt;- liftIO $ parseUrl "http://www.example.com/foo.txt"

        -- Now get the response
        res &lt;- http req manager

        -- And finally stream the value to a file
        responseBody res $$ sinkFile "foo.txt"

        -- Make it a POST request, don't follow redirects, and accept any
        -- status code.
        let req2 = req
                { method = "POST"
                , redirectCount = 0
                , checkStatus = \_ _ -&gt; Nothing
                }
        res2 &lt;- http req2 manager
        responseBody res2 $$ sinkFile "post-foo.txt"</codeblock>
 </conbody></concept><concept id="concepts-251"><title>Concepts</title><conbody>
  <p id="251-x-3">The simplest way to make a request in <codeph id="251-x-4">http-conduit</codeph> is with the
    <codeph id="251-x-5">simpleHttp</codeph> function. This function takes a <codeph id="251-x-6">String</codeph> giving a URL
   and returns a <codeph id="251-x-7">ByteString</codeph> with the contents of that URL. But under the surface,
   there are a few more steps:</p>
  <ul id="251-ul_jap_okc_we">
   <li id="251-x-8">A new connection <codeph id="251-x-9">Manager</codeph> is allocated.</li>
   <li id="251-x-10">The URL is parsed to a <codeph id="251-x-11">Request</codeph>. If the URL is invalid, then an exception is
    thrown.</li>
   <li id="251-x-12">The HTTP request is made, following any redirects from the server.</li>
   <li id="251-x-13">If the response has a status code outside the 200-range, an exception is thrown.</li>
   <li id="251-x-14">The response body is read into memory and returned.</li>
   <li id="251-x-15"><codeph id="251-x-16">runResourceT</codeph> is called, which will free up any resources (e.g., the open
    socket to the server).</li>
  </ul>
  <p id="251-x-17">If you want more control of what's going on, then you can configure any of the steps above
   (plus a few more) by explicitly creating a <codeph id="251-x-18">Request</codeph> value, allocating your
    <codeph id="251-x-19">Manager</codeph> manually, and using the <codeph id="251-x-20">http</codeph> and
    <codeph id="251-x-21">httpLbs</codeph> functions.</p>
 </conbody></concept><concept id="request-252"><title>Request</title><conbody>
  <p id="252-x-3">The easiest way to creating a <codeph id="252-x-4">Request</codeph> is with the <codeph id="252-x-5">parseUrl</codeph>
   function. This function will return a value in any <codeph id="252-x-6">Failure</codeph> monad, such as
    <codeph id="252-x-7">Maybe</codeph> or <codeph id="252-x-8">IO</codeph>. The last of those is the most commonly used, and
   results in a runtime exception whenever an invalid URL is provided. However, you can use a
   different monad if, for example, you want to validate user input.</p>
  <codeblock id="252-x-9" outputclass="haskell">import Network.HTTP.Conduit
import System.Environment (getArgs)
import qualified Data.ByteString.Lazy as L
import Control.Monad.IO.Class (liftIO)

main :: IO ()
main = do
    args &lt;- getArgs
    case args of
        [urlString] -&gt;
            case parseUrl urlString of
                Nothing -&gt; putStrLn "Sorry, invalid URL"
                Just req -&gt; withManager $ \manager -&gt; do
                    Response _ _ _ lbs &lt;- httpLbs req manager
                    liftIO $ L.putStr lbs
        _ -&gt; putStrLn "Sorry, please provide exactly one URL"</codeblock>
  <p id="252-x-10">The <codeph id="252-x-11">Request</codeph> type is abstract so that <codeph id="252-x-12">http-conduit</codeph> can add new
   settings in the future without breaking the API (see the <xref id="252-x-13" href="settings-types.dita#settings-types-248" format="dita">Settings Type</xref>
   chapter for more information). In order to make changes to individual records, you use record
   notation. For example, a modification to our program that issues <codeph id="252-x-14">HEAD</codeph> requests
   and prints the response headers would be:</p>
  <codeblock id="252-x-15" outputclass="haskell">{-# LANGUAGE OverloadedStrings #-}
import Network.HTTP.Conduit
import System.Environment (getArgs)
import qualified Data.ByteString.Lazy as L
import Control.Monad.IO.Class (liftIO)

main :: IO ()
main = do
    args &lt;- getArgs
    case args of
        [urlString] -&gt;
            case parseUrl urlString of
                Nothing -&gt; putStrLn "Sorry, invalid URL"
                Just req -&gt; withManager $ \manager -&gt; do
                    let reqHead = req { method = "HEAD" }
                    Response status _ headers _ &lt;- http reqHead manager
                    liftIO $ do
                        print status
                        mapM_ print headers
        _ -&gt; putStrLn "Sorry, please provide example one URL"</codeblock>
  <p id="252-x-16">There are a number of different configuration settings in the API, some noteworthy ones
   are:</p>
  <dl id="252-x-17">
   <dlentry id="252-x-18">
    <dt id="252-x-19">proxy</dt>
    <dd id="252-x-20">Allows you to pass the request through the given proxy server.</dd>
   </dlentry>
   <dlentry id="252-x-21">
    <dt id="252-x-22">redirectCount</dt>
    <dd id="252-x-23">Indicate how many redirects to follow. Default is 10.</dd>
   </dlentry>
   <dlentry id="252-x-24">
    <dt id="252-x-25">checkStatus</dt>
    <dd id="252-x-26">Check the status code of the return value. By default, gives an exception for any non-2XX
     response.</dd>
   </dlentry>
   <dlentry id="252-x-27">
    <dt id="252-x-28">requestBody</dt>
    <dd id="252-x-29">The request body to be sent. Be sure to also update the <codeph id="252-x-30">method</codeph>. For the
     common case of url-encoded data, you can use the <codeph id="252-x-31">urlEncodedBody</codeph> function.</dd>
   </dlentry>
  </dl>
 </conbody></concept><concept id="manager-253"><title>Manager</title><conbody>
  <p id="253-x-3">The connection manager allows you to reuse connections. When making multiple queries to a
   single server (e.g., accessing Amazon S3), this can be critical for creating efficient code. A
   manager will keep track of multiple connections to a given server (taking into account port and
   SSL as well), automatically reaping unused connections as needed. When you make a request,
    <codeph id="253-x-4">http-conduit</codeph> first tries to check out an existing connection. When you're
   finished with the connection (if the server allows keep-alive), the connection is returned to the
   manager. If anything goes wrong, the connection is closed.</p>
  <p id="253-x-5">To keep our code exception-safe, we use the <codeph id="253-x-6">ResourceT</codeph> monad transformer. All
   this means for you is that your code needs to be wrapped inside a call to
    <codeph id="253-x-7">runResourceT</codeph>, either implicitly or explicitly, and that code inside that block
   will need to <codeph id="253-x-8">liftIO</codeph> to perform normal IO actions.</p>
  <p id="253-x-9">There are two ways you can get ahold of a manager. <codeph id="253-x-10">newManager</codeph> will return a
   manager that will not be automatically closed (you can use <codeph id="253-x-11">closeManager</codeph> to do so
   manually), while <codeph id="253-x-12">withManager</codeph> will start a new <codeph id="253-x-13">ResourceT</codeph> block,
   allow you to use the manager, and then automatically close the <codeph id="253-x-14">ResourceT</codeph> when
   you're done. If you want to use a <codeph id="253-x-15">ResourceT</codeph> for an entire application, and have
   no need to close it, you should probably use <codeph id="253-x-16">newManager</codeph>.</p>
  <p id="253-x-17">One other thing to point out: you obviously don't want to create a new manager for each and
   every request; that would defeat the whole purpose. You should create your
    <codeph id="253-x-18">Manager</codeph> early and then share it.</p>
 </conbody></concept><concept id="response-254"><title>Response</title><conbody>
  <p id="254-x-3">The <codeph id="254-x-4">Response</codeph> datatype has three pieces of information: the status code, the
   response headers, and the response body. The first two are straight-forward; let's discuss the
   body.</p>
  <p id="254-x-5">The <codeph id="254-x-6">Response</codeph> type has a type variable to allow the response body to be of
   multiple types. If you want to use <codeph id="254-x-7">http-conduit</codeph>'s streaming interface, you want
   this to be a <codeph id="254-x-8">Source</codeph>. For the simple interface, it will be a lazy
    <codeph id="254-x-9">ByteString</codeph>. One thing to note is that, even though we use a lazy
    <codeph id="254-x-10">ByteString</codeph>, <i id="254-x-11">the entire response is held in memory</i>. In other words, we
   perform no lazy I/O in this package.</p>
  <note id="254-x-12">The <codeph id="254-x-13">conduit</codeph> package does provide a lazy module which would allow you to
   read this value in lazily, but like any lazy I/O, it's a bit unsafe, and definitely
   non-deterministic. If you need it though, you can use it.</note>
 </conbody></concept><concept id="http-httplbs-255"><title>http and httpLbs</title><conbody>
  <p id="255-x-3">So let's tie it together. The <codeph id="255-x-4">http</codeph> function gives you access to the streaming
   interface (i.e., it returns a <codeph id="255-x-5">Response</codeph> using a <codeph id="255-x-6">BufferedSource</codeph>)
   while <codeph id="255-x-7">httpLbs</codeph> returns a lazy <codeph id="255-x-8">ByteString</codeph>. Both of these return
   values in the <codeph id="255-x-9">ResourceT</codeph> transformer so that they can access the
    <codeph id="255-x-10">Manager</codeph> and have connections handled properly in the case of exceptions.</p>
  <note>If you want to ignore the remainder of a large response body, you can connect to the
    <codeph>sinkNull</codeph> sink. The underlying connection will automatically be closed,
   preventing you from having to read a large response body over the network.</note>
 </conbody></concept></concept>