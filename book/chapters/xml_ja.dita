<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="xml-256"><title>xml-conduit</title><conbody>
  <p id="256-x-3">Many developers cringe at the thought of dealing with XML files. XML has the reputation of
   having a complicated data model, with obfuscated libraries and huge layers of complexity sitting
   between you and your goal. I'd like to posit that a lot of that pain is actually a language and
   library issue, not inherent to XML.</p>
  <p id="256-x-4">Once again, Haskell's type system allows us to easily break down the problem to its most basic
   form. The <apiname id="256-x-5">xml-types</apiname> package neatly deconstructs the XML data model (both a
   streaming and DOM-based approach) into some simple ADTs. Haskell's standard immutable data
   structures make it easier to apply transforms to documents, and a simple set of functions makes
   parsing and rendering a breeze.</p>
  <p id="256-x-6">We're going to be covering the <apiname id="256-x-7">xml-conduit</apiname> package. Under
   the surface, this package uses a lot of the approaches Yesod in general does for high
   performance: <apiname id="256-x-8">blaze-builder</apiname>, <apiname id="256-x-9">text</apiname>,
    <apiname id="256-x-10">conduit</apiname> and <apiname id="256-x-11">attoparsec</apiname>. But from a
   user perspective, it provides everything from the simplest APIs
    (<codeph id="256-x-15">readFile</codeph>/<codeph id="256-x-16">writeFile</codeph>) through full control of XML event
   streams.</p>
  <p id="256-x-12">In addition to <codeph id="256-x-17">xml-conduit</codeph>, there are a few related packages that
   come into play, like <apiname id="256-x-13">xml-hamlet</apiname> and <apiname id="256-x-14">xml2html</apiname>. We'll cover both how to use all these packages, and when they should be
   used.</p>
 </conbody><concept id="synopsis-257"><title>Synopsis</title><conbody>
  <fig id="257-x-3">
   <title id="257-x-4">Input XML file</title>
   <codeblock id="257-x-5" outputclass="xml">&lt;document title="My Title"&gt;
    &lt;para&gt;This is a paragraph. It has &lt;em&gt;emphasized&lt;/em&gt; and &lt;strong&gt;strong&lt;/strong&gt; words.&lt;/para&gt;
    &lt;image href="myimage.png"/&gt;
&lt;/document&gt;</codeblock>
  </fig>
  <fig id="257-x-6">
   <title id="257-x-7">Haskell code</title>
   <codeblock id="257-x-8" outputclass="haskell">{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE OverloadedStrings #-}
import Prelude hiding (readFile, writeFile)
import Text.XML
import Text.Hamlet.XML

main :: IO ()
main = do
    -- readFile will throw any parse errors as runtime exceptions
    -- def uses the default settings
    Document prologue root epilogue &lt;- readFile def "input.xml"

    -- root is the root element of the document, let's modify it
    let root' = transform root

    -- And now we write out. Let's indent our output
    writeFile def
        { rsPretty = True
        } "output.html" $ Document prologue root' epilogue

-- We'll turn out &lt;document&gt; into an XHTML document
transform :: Element -&gt; Element
transform (Element _name attrs children) = Element "html" [] [xml|
&lt;head&gt;
    &lt;title&gt;
        $maybe title &lt;- lookup "title" attrs
            \#{title}
        $nothing
            Untitled Document
&lt;body&gt;
    $forall child &lt;- children
        ^{goNode child}
|]

goNode :: Node -&gt; [Node]
goNode (NodeElement e) = [NodeElement $ goElem e]
goNode (NodeContent t) = [NodeContent t]
goNode (NodeComment _) = [] -- hide comments
goNode (NodeInstruction _) = [] -- and hide processing instructions too

-- convert each source element to its XHTML equivalent
goElem :: Element -&gt; Element
goElem (Element "para" attrs children) =
    Element "p" attrs $ concatMap goNode children
goElem (Element "em" attrs children) =
    Element "i" attrs $ concatMap goNode children
goElem (Element "strong" attrs children) =
    Element "b" attrs $ concatMap goNode children
goElem (Element "image" attrs _children) =
    Element "img" (map fixAttr attrs) [] -- images can't have children
  where
    fixAttr ("href", value) = ("src", value)
    fixAttr x = x
goElem (Element name attrs children) =
    -- don't know what to do, just pass it through...
    Element name attrs $ concatMap goNode children</codeblock>
  </fig>
  <fig id="257-x-9">
   <title id="257-x-10">Output XHTML</title>
   <codeblock id="257-x-11" outputclass="html">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;
            My Title
        &lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;
            This is a paragraph. It has 
            &lt;i&gt;
                emphasized
            &lt;/i&gt;
            and 
            &lt;b&gt;
                strong
            &lt;/b&gt;
            words.
        &lt;/p&gt;
        &lt;img src="myimage.png"/&gt;
    &lt;/body&gt;
&lt;/html&gt;</codeblock>
  </fig>
 </conbody></concept><concept id="types-258"><title>Types</title><conbody>
  <p id="258-x-3">Let's take a bottom-up approach to analyzing types. This section will also serve as a primer on
   the XML data model itself, so don't worry if you're not completely familiar with it.</p>
  <p id="258-x-4">I think the first place where Haskell really shows its strength is with the
    <apiname id="258-x-5">xml-types:Data.XML.Types:Name</apiname> datatype. Many languages (like Java) struggle
   with properly expressing names. The issue is that there are in fact three components to a name:
   its local name, its namespace (optional), and its prefix (also optional). Let's look at some XML
   to explain:</p>
  <codeblock id="258-x-6" outputclass="xml">&lt;no-namespace/&gt;
&lt;no-prefix xmlns="first-namespace" first-attr="value1"/&gt;
&lt;foo:with-prefix xmlns:foo="second-namespace" foo:second-attr="value2"/&gt;</codeblock>
  <p id="258-x-7">The first tag has a local name of <codeph id="258-x-8">no-namespace</codeph>, and no
   namespace or prefix. The second tag (local name: <codeph id="258-x-9">no-prefix</codeph>) <i id="258-x-10">also</i> has no prefix, but it does have a namespace (<codeph id="258-x-11">first-namespace</codeph>). <codeph id="258-x-24">first-attr</codeph>, however, does <i id="258-x-12">not</i>
   inherit that namespace: attribute namespaces must always be explicitly set with a prefix.</p>
  <note id="258-x-13">Namespaces are almost always URIs of some sort, though there is nothing in any specification
   requiring that it be so.</note>
  <p id="258-x-14">The third tag has a local name of <codeph id="258-x-15">with-prefix</codeph>, a prefix of
    <codeph id="258-x-16">foo</codeph> and a namespace of <codeph id="258-x-17">second-namespace</codeph>.
   Its attribute has a <codeph id="258-x-25">second-attr</codeph> local name and the same prefix and namespace.
   The <codeph id="258-x-26">xmlns</codeph> and <codeph id="258-x-27">xmlns:foo</codeph> attributes are part of the namespace
   specification, and are not considered attributes of their respective elements.</p>
  <p id="258-x-18">So let's review what we need from a name: every name has a local name, and it can optionally
   have a prefix and namespace. Seems like a simple fit for a record type:</p>
  <codeblock id="258-x-19" outputclass="haskell">data Name = Name
    { nameLocalName :: Text
    , nameNamespace :: Maybe Text
    , namePrefix :: Maybe Text
    }</codeblock>
  <p id="258-x-20">According the the XML namespace standard, two names are considered equivalent if they
   have the same localname and namespace. In other words, the prefix is not important. Therefore,
    <codeph id="258-x-28">xml-types</codeph> defines <codeph id="258-x-29">Eq</codeph> and <codeph id="258-x-30">Ord</codeph> instances that
   ignore the prefix.</p>
  <p id="258-x-21">The last class instance worth mentioning is <codeph id="258-x-31">IsString</codeph>. It would be
   very tedious to have to manually type out <codeph id="258-x-22">Name "p" Nothing Nothing</codeph>
   every time we want a paragraph. If you turn on <codeph id="258-x-32">OverloadedStrings</codeph>,
    <codeph id="258-x-33">"p"</codeph> will resolve to that all by itself! In addition, the
    <codeph id="258-x-34">IsString</codeph> instance recognizes something called Clark notation, which allows you
   to prefix the namespace surrounded in curly brackets. In other words:</p>
  <codeblock id="258-x-23" outputclass="haskell">"{namespace}element" == Name "element" (Just "namespace") Nothing
"element" == Name "element" Nothing Nothing</codeblock>
 </conbody><concept id="four-node-types-259"><title>The Four Types of Nodes</title><conbody>
  <p id="259-x-3">XML documents are a tree of nested nodes. There are in fact four different types of nodes
   allowed: elements, content (i.e., text), comments, and processing instructions.</p>
  <note id="259-x-4">You may not be familiar with that last one, it's less commonly used. It is marked
   up as:<codeblock id="259-x-5" outputclass="xml">&lt;?target data?&gt;</codeblock>There are two
   surprising facts about processing instructions (PIs):<ul id="259-ul_zfo_vsx_md">
    <li id="259-x-6">PIs don't have attributes. While often times you'll see processing instructions
     that appear to have attributes, there are in fact no rules about that data of an
     instruction.</li>
    <li id="259-x-7">The <codeph>&lt;?xml ...?&gt;</codeph> stuff at the beginning of a document is not
     a processing instruction. It is simply the beginning of the document (known as the XML
     declaration), and happens to look an awful lot like a PI. The difference though is that the
      <codeph>&lt;?xml ...?&gt;</codeph> line will not appear in your parsed content.</li>
   </ul></note>
  <p id="259-x-8">Since processing instructions have two pieces of text associated with them (the target and the
   data), we have a simple data type:</p>
  <codeblock id="259-x-9" outputclass="haskell">data Instruction = Instruction
    { instructionTarget :: Text
    , instructionData :: Text
    }</codeblock>
  <p id="259-x-10">Comments have no special datatype, since they are just text. But content is an
   interesting one: it could contain either plain text or unresolved entities (e.g.,
    <codeph id="259-x-19">&amp;copyright-statement;</codeph>). <apiname id="259-x-11">xml-types</apiname> keeps those
   unresolved entities in all the data types in order to completely match the spec. However, in
   practice, it can be very tedious to program against those data types. And in most use cases, an
   unresolved entity is going to end up as an error anyway.</p>
  <p id="259-x-12">So the <apiname id="259-x-13">xml-conduit:Text.XML</apiname> module defines its own set
   of datatypes for nodes, elements and documents that removes all unresolved entities. If you need
   to deal with unresolved entities instead, you should use the <apiname id="259-x-14">xml-conduit:Text.XML.Unresolved</apiname> module. From now on, we'll be focusing only on the
    <codeph id="259-x-20">Text.XML</codeph> data types, though they are almost identical to the
    <codeph id="259-x-21">xml-types</codeph> versions.</p>
  <p id="259-x-15">Anyway, after that detour: content is just a piece of text, and therefore it too does
   not have a special datatype. The last node type is an element, which contains three pieces of
   information: a name, a list of attributes and a list of children nodes. An attribute has two
   pieces of information: a name and a value. (In <codeph id="259-x-22">xml-types</codeph>, this value could
   contain unresolved entities as well.) So our <codeph id="259-x-23">Element</codeph> is defined as:</p>
  <codeblock id="259-x-16" outputclass="haskell">data Element = Element
    { elementName :: Name
    , elementAttributes :: [(Name, Text)]
    , elementNodes :: [Node]
    }</codeblock>
  <p id="259-x-17">Which of course begs the question: what does a <codeph id="259-x-24">Node</codeph> look like? This
   is where Haskell really shines: its sum types model the XML data model perfectly.</p>
  <codeblock id="259-x-18" outputclass="haskell">data Node
    = NodeElement Element
    | NodeInstruction Instruction
    | NodeContent Text
    | NodeComment Text</codeblock>
 </conbody></concept><concept id="documents-260"><title>Documents</title><conbody>
  <p id="260-x-3">So now we have elements and nodes, but what about an entire document? Let's just lay out the
   datatypes:</p>
  <codeblock id="260-x-4" outputclass="haskell">data Document = Document
    { documentPrologue :: Prologue
    , documentRoot :: Element
    , documentEpilogue :: [Miscellaneous]
    }

data Prologue = Prologue
    { prologueBefore :: [Miscellaneous]
    , prologueDoctype :: Maybe Doctype
    , prologueAfter :: [Miscellaneous]
    }

data Miscellaneous
    = MiscInstruction Instruction
    | MiscComment Text

data Doctype = Doctype
    { doctypeName :: Text
    , doctypeID :: Maybe ExternalID
    }

data ExternalID
    = SystemID Text
    | PublicID Text Text</codeblock>
  <p id="260-x-5">The XML spec says that a document has a single root element
    (<codeph id="260-x-9">documentRoot</codeph>). It also has an optional doctype statement. Before and after
   both the doctype and the root element, you are allowed to have comments and processing
   instructions. (You can also have whitespace, but that is ignored in the parsing.)</p>
  <p id="260-x-6">So what's up with the doctype? Well, it specifies the root element of the document, and then
   optional public and system identifiers. These are used to refer to DTD files, which give more
   information about the file (e.g., validation rules, default attributes, entity resolution). Let's
   see some examples:</p>
  <codeblock id="260-x-7" outputclass="xml">&lt;!DOCTYPE root&gt; &lt;!-- no external identifier --&gt;
&lt;!DOCTYPE root SYSTEM "root.dtd"&gt; &lt;!-- a system identifier --&gt;
&lt;!DOCTYPE root PUBLIC "My Root Public Identifier" "root.dtd"&gt; &lt;!-- public identifiers have a system ID as well --&gt;</codeblock>
  <p id="260-x-8">And that, my friends, is the entire XML data model. For many parsing purposes, you'll
   be able to simply ignore the entire <codeph id="260-x-10">Document</codeph> datatype and go immediately to the
    <codeph id="260-x-11">documentRoot</codeph>.</p>
 </conbody></concept><concept id="events-261"><title>Events</title><conbody>
  <p id="261-x-3">In addition to the document API, <codeph id="261-x-5">xml-types</codeph> defines an <apiname id="261-x-4">xml-types:Data.XML.Types:Event</apiname> datatype. This can be used for constructing
   streaming tools, which can be much more memory efficient for certain kinds of processing (eg,
   adding an extra attribute to all elements). We will not be covering the streaming API currently,
   though it should look very familiar after analyzing the document API.</p>
  <note id="261-x-6">You can see an example of the streaming API in the <xref id="261-x-7" href="case-study-sphinx.dita#case-study-sphinx-193" format="dita">Sphinx case
    study</xref>.</note>
 </conbody></concept></concept><concept id="text-xml-262"><title>Text.XML</title><conbody>
  <p id="262-x-3">The recommended entry point to xml-conduit is the <apiname id="262-x-4">xml-conduit:Text.XML</apiname> module. This module exports all of the datatypes you'll need to
   manipulate XML in a DOM fashion, as well as a number of different approaches for parsing and
   rendering XML content. Let's start with the simple
   ones:<codeblock id="262-x-5" outputclass="haskell">readFile  :: ParseSettings  -&gt; FilePath -&gt; IO Document
writeFile :: RenderSettings -&gt; FilePath -&gt; Document -&gt; IO ()</codeblock>This
   introduces the <codeph id="262-x-6">ParseSettings</codeph> and <codeph id="262-x-7">RenderSettings</codeph> datatypes. You can use these to modify the behavior of the parser and
   renderer, such as adding character entities and turning on pretty (i.e., indented) output. Both
   these types are instances of the <apiname id="262-x-8">data-default:Data.Default:Default</apiname>
   typeclass, so you can simply use <codeph id="262-x-9">def</codeph> when these need to be supplied.
   That is how we will supply these values through the rest of the chapter; please see the API docs
   for more information.</p>
  <p id="262-x-14">It's worth pointing out that in addition to the file-based API, there is also a text- and
   bytestring-based API. The bytestring-powered functions all perform intelligent encoding
   detections, and support UTF-8, UTF-16 and UTF-32, in either big or little endian, with and
   without a Byte-Order Marker (BOM). All output is generated in UTF-8.</p>
  <p id="262-x-15">For complex data lookups, we recommend using the higher-level cursors API. The
   standard <codeph id="262-x-10">Text.XML</codeph> API not only forms the basis for that higher level, but is
   also a great API for simple XML transformations and for XML generation. See the synopsis for an
   example.</p>
 </conbody><concept id="filepath-263"><title>A note about file paths</title><conbody>
  <p id="263-x-3">In the type signature above, we have a type <codeph id="263-x-4">FilePath</codeph>. However, <b id="263-x-5">this isn't
     <codeph id="263-x-6">Prelude.FilePath</codeph></b>. The standard <codeph id="263-x-7">Prelude</codeph> defines a type
   synonym <codeph id="263-x-8">type FilePath = [Char]</codeph>. Unfortunately, there are many limitations to
   using such an approach, including confusion of filename character encodings and differences in
   path separators.</p>
  <p id="263-x-9">Instead, <codeph id="263-x-10">xml-conduit</codeph> uses the <apiname id="263-x-11">system-filepath</apiname> package,
   which defines an abstract <codeph id="263-x-12">FilePath</codeph> type. I've personally found this to be a much
   nicer approach to work with. The package is fairly easy to follow, so I won't go into details
   here. But I do want to give a few quick explanations of how to use it:</p>
  <ul id="263-ul_lgl_lyb_we">
   <li id="263-x-13">Since a <codeph id="263-x-14">FilePath</codeph> is an instance of <codeph id="263-x-15">IsString</codeph>, you can type
    in regular strings and they will be treated properly, as long as the
     <codeph id="263-x-16">OverloadedStrings</codeph> extension is enabled. (I highly recommend enabling it
    anyway, as it makes dealing with <codeph id="263-x-17">Text</codeph> values much more pleasant.)</li>
   <li id="263-x-18">If you need to explicitly convert to or from <codeph id="263-x-19">Prelude</codeph>'s
     <codeph id="263-x-20">FilePath</codeph>, you should use the
     <apiname id="263-x-21">system-filepath:Filesystem.Path.CurrentOS:encodeString</apiname> and
     <apiname id="263-x-22">system-filepath:Filesystem.Path.CurrentOS:decodeString</apiname>, respectively. This
    takes into account file path encodings.</li>
   <li id="263-x-23">Instead of manually splicing together directory names and file names with extensions, use the
    operators in the <codeph id="263-x-24">Filesystem.Path.CurrentOS</codeph> module, e.g. <codeph id="263-x-25">myfolder &lt;/&gt;
     filename &lt;.&gt; extension</codeph>.</li>
  </ul>
 </conbody></concept></concept><concept id="cursor-264"><title>Cursor</title><conbody>
  <p id="264-x-3">Suppose you want to pull the title out of an XHTML document. You could do so with the
    <codeph id="264-x-49">Text.XML</codeph> interface we just described, using standard pattern matching on the
   children of elements. But that would get very tedious, very quickly. Probably the gold standard
   for these kinds of lookups is XPath, where you would be able to write <codeph id="264-x-4">/html/head/title</codeph>. And that's exactly what inspired the design of the <apiname id="264-x-5">xml-conduit:Text.XML.Cursor</apiname> combinators.</p>
  <p id="264-x-6">A cursor is an XML node that knows its location in the tree; it's able to traverse
   upwards, sideways, and downwards. (Under the surface, this is achieved by <xref id="264-x-7" href="http://www.haskell.org/haskellwiki/Tying_the_Knot" format="html" scope="external">tying
    the knot</xref>.) There are two functions available for creating cursors from
    <codeph id="264-x-50">Text.XML</codeph> types: <codeph id="264-x-51">fromDocument</codeph> and
   <codeph id="264-x-52">fromNode</codeph>.</p>
  <p id="264-x-8">We also have the concept of an <term id="264-x-9">Axis</term>, defined as <codeph id="264-x-10">type Axis = Cursor -&gt; [Cursor]</codeph>. It's easiest to get started by looking at
   example axes: child returns zero or more cursors that are the child of the current one, parent
   returns the single parent cursor of the input, or an empty list if the input is the root element,
   and so on.</p>
  <p id="264-x-11">In addition, there are some axes that take predicates. <codeph id="264-x-12">element</codeph> is a commonly
   used function that filters down to only elements which match the given name. For example,
    <codeph id="264-x-13">element "title"</codeph> will return the input element if its name is "title", or an
   empty list otherwise.</p>
  <p id="264-x-14">Another common function which isn't quite an axis is <codeph id="264-x-15">content :: Cursor -&gt;
    [Text]</codeph>. For all content nodes, it returns the contained text; otherwise, it returns an
   empty list.</p>
  <p id="264-x-16">And thanks to the monad instance for lists, it's easy to string all of these
   together. For example, to do our title lookup, we would write the following program:</p>
  <codeblock id="264-x-17" outputclass="haskell">{-# LANGUAGE OverloadedStrings #-}
import Prelude hiding (readFile)
import Text.XML
import Text.XML.Cursor
import qualified Data.Text as T

main :: IO ()
main = do
    doc &lt;- readFile def "test.xml"
    let cursor = fromDocument doc
    print $ T.concat $
            child cursor &gt;&gt;= element "head" &gt;&gt;= child
                         &gt;&gt;= element "title" &gt;&gt;= descendant &gt;&gt;= content</codeblock>
  <p id="264-x-18">What this says is:</p>
  <ol id="264-ol_d37c1613-8879-4be8-862c-9823d88f5b90">
   <li id="264-x-19">Get me all the child nodes of the root element</li>
   <li id="264-x-20">Filter down to only the elements named "head"</li>
   <li id="264-x-21">Get all the children of all those head elements</li>
   <li id="264-x-22">Filter down to only the elements named "title"</li>
   <li id="264-x-23">Get all the descendants of all those title elements. (A descendant is a child, or a
    descendant of a child. Yes, that was a recursive definition.)</li>
   <li id="264-x-24">Get only the text nodes.</li>
  </ol>
  <p id="264-x-25">So for the input document:</p>
  <codeblock id="264-x-26" outputclass="xml">&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;My &lt;b&gt;Title&lt;/b&gt;&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;Foo bar baz&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</codeblock>
  <p id="264-x-27">We end up with the output <codeph id="264-x-28">My Title</codeph>. This is all well and good, but it's much
   more verbose than the XPath solution. To combat this verbosity, Aristid Breitkreuz added a set of
   operators to the Cursor module to handle many common cases. So we can rewrite our example as:</p>
  <codeblock id="264-x-29" outputclass="haskell">{-# LANGUAGE OverloadedStrings #-}
import Prelude hiding (readFile)
import Text.XML
import Text.XML.Cursor
import qualified Data.Text as T

main :: IO ()
main = do
    doc &lt;- readFile def "test.xml"
    let cursor = fromDocument doc
    print $ T.concat $
        cursor $/ element "head" &amp;/ element "title" &amp;// content</codeblock>
  <p id="264-x-30"><codeph id="264-x-31">$/</codeph> says to apply the axis on the right to the children of
   the cursor on the left. <codeph id="264-x-32">&amp;/</codeph> is almost identical, but is instead
   used to combine two axes together. This is a general rule in <codeph id="264-x-53">Text.XML.Cursor</codeph>: operators beginning with $ directly apply an axis, while &amp; will
   combine two together. <codeph id="264-x-33">&amp;//</codeph> is used for applying an axis to all
   descendants.</p>
  <p id="264-x-34">Let's go for a more complex, if more contrived, example. We have a document that looks
   like:</p>
  <codeblock id="264-x-35" outputclass="xml">&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Headings&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;hgroup&gt;
            &lt;h1&gt;Heading 1 foo&lt;/h1&gt;
            &lt;h2 class="foo"&gt;Heading 2 foo&lt;/h2&gt;
        &lt;/hgroup&gt;
        &lt;hgroup&gt;
            &lt;h1&gt;Heading 1 bar&lt;/h1&gt;
            &lt;h2 class="bar"&gt;Heading 2 bar&lt;/h2&gt;
        &lt;/hgroup&gt;
    &lt;/body&gt;
&lt;/html&gt;</codeblock>
  <p id="264-x-36">We want to get the content of all the <codeph id="264-x-37">h1</codeph> tags which precede an
    <codeph id="264-x-38">h2</codeph> tag with a <codeph id="264-x-39">class</codeph> attribute of "bar". To perform this
   convoluted lookup, we can write:</p>
  <codeblock id="264-x-40" outputclass="haskell">{-# LANGUAGE OverloadedStrings #-}
import Prelude hiding (readFile)
import Text.XML
import Text.XML.Cursor
import qualified Data.Text as T

main :: IO ()
main = do
    doc &lt;- readFile def "test2.xml"
    let cursor = fromDocument doc
    print $ T.concat $
        cursor $// element "h2"
               &gt;=&gt; attributeIs "class" "bar"
               &gt;=&gt; precedingSibling
               &gt;=&gt; element "h1"
               &amp;// content</codeblock>
  <p id="264-x-41">Let's step through that. First we get all h2 elements in the document.
    (<codeph id="264-x-54">$//</codeph> gets all descendants of the root element.) Then we filter out only those
   with <codeph id="264-x-55">class=bar</codeph>. That <codeph id="264-x-42">&gt;=&gt;</codeph> operator is actually
   the standard operator from <apiname id="264-x-43">base:Control.Monad</apiname>; yet another advantage
   of the monad instance of lists. <codeph id="264-x-56">precedingSibling</codeph> finds all nodes that come
   before our node <b id="264-x-44">and</b> share the same parent. (There is also a <codeph id="264-x-45">preceding</codeph> axis which takes all elements earlier in the tree.) We then take just the
    <codeph id="264-x-57">h1</codeph> elements, and then grab their content.</p>
  <note id="264-x-46">The equivalent XPath, for comparison, would be <codeph id="264-x-47">//h2[@class =
    'bar']/preceding-sibling::h1//text()</codeph>.</note>
  <p id="264-x-48">While the cursor API isn't quite as succinct as XPath, it has the advantages of being standard
   Haskell code, and of type safety.</p>
 </conbody></concept><concept id="xml-hamlet-265"><title>xml-hamlet</title><conbody>
  <p id="265-x-3" outputclass="haskell">Thanks to the simplicity of Haskell's data type system, creating
            XML content with the <codeph id="265-x-24">Text.XML API</codeph> is easy, if a bit verbose. The
            following code:</p>
  <codeblock outputclass="haskell" id="265-x-4">{-# LANGUAGE OverloadedStrings #-}
import Text.XML
import Prelude hiding (writeFile)

main :: IO ()
main =
    writeFile def "test3.xml" $ Document (Prologue [] Nothing []) root []
  where
    root = Element "html" []
        [ NodeElement $ Element "head" []
            [ NodeElement $ Element "title" []
                [ NodeContent "My "
                , NodeElement $ Element "b" []
                    [ NodeContent "Title"
                    ]
                ]
            ]
        , NodeElement $ Element "body" []
            [ NodeElement $ Element "p" []
                [ NodeContent "foo bar baz"
                ]
            ]
        ]</codeblock>
  <p id="265-x-5">produces</p>
  <codeblock id="265-x-6" outputclass="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;html&gt;&lt;head&gt;&lt;title&gt;My &lt;b&gt;Title&lt;/b&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;foo bar baz&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</codeblock>
  <p id="265-x-7">This is leaps and bounds easier than having to deal with an imperative, mutable-value-based API
   (cough, Java, cough), but it's far from pleasant, and obscures what we're really trying to
   achieve. To simplify things, we have the <apiname id="265-x-8">xml-hamlet</apiname> package, which using
   Quasi-Quotation to allow you to type in your XML in a natural syntax. For example, the above
   could be rewritten as:</p>
  <codeblock id="265-x-9" outputclass="haskell">{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
import Text.XML
import Text.Hamlet.XML
import Prelude hiding (writeFile)

main :: IO ()
main =
    writeFile def "test3.xml" $ Document (Prologue [] Nothing []) root []
  where
    root = Element "html" [] [xml|
&lt;head&gt;
    &lt;title&gt;
        My #
        &lt;b&gt;Title
&lt;body&gt;
    &lt;p&gt;foo bar baz
|]</codeblock>
  <p id="265-x-10">Let's make a few points:</p>
  <ul id="265-ul_56cf6fac-3c78-4e75-b51a-7dfd6b087eeb">
   <li id="265-x-11">The syntax is almost identical to normal Hamlet, except URL-interpolation (@{...}) has been
    removed. As such:<ul id="265-ul_db2c4193-433e-48a6-abe9-29ca9b3835bc">
     <li id="265-x-12">No close tags.</li>
     <li id="265-x-13">Whitespace-sensitive.</li>
     <li id="265-x-14">If you want to have whitespace at the end of a line, use a # at the end. At the beginning,
      use a backslash.</li>
    </ul></li>
   <li id="265-x-15">An <codeph id="265-x-25">xml</codeph> interpolation will return a list of <codeph id="265-x-16">Node</codeph>s. So you still need to wrap up the output in all the normal
                    <codeph id="265-x-26">Document</codeph> and root <codeph id="265-x-27">Element</codeph> constructs.</li>
   <li id="265-x-17">There is no support for the special <codeph id="265-x-28">.class</codeph> and
                    <codeph id="265-x-29">#id</codeph> attribute forms.</li>
  </ul>
  <p id="265-x-18">And like normal Hamlet, you can use variable interpolation and control structures. So a
   slightly more complex example would be:</p>
  <codeblock id="265-x-19" outputclass="haskell">{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
import Text.XML
import Text.Hamlet.XML
import Prelude hiding (writeFile)
import Data.Text (Text, pack)

data Person = Person
    { personName :: Text
    , personAge :: Int
    }

people :: [Person]
people =
    [ Person "Michael" 26
    , Person "Miriam" 25
    , Person "Eliezer" 3
    , Person "Gavriella" 1
    ]

main :: IO ()
main =
    writeFile def "people.xml" $ Document (Prologue [] Nothing []) root []
  where
    root = Element "html" [] [xml|
&lt;head&gt;
    &lt;title&gt;Some People
&lt;body&gt;
    &lt;h1&gt;Some People
    $if null people
        &lt;p&gt;There are no people.
    $else
        &lt;dl&gt;
            $forall person &lt;- people
                ^{personNodes person}
|]

personNodes :: Person -&gt; [Node]
personNodes person = [xml|
&lt;dt&gt;#{personName person}
&lt;dd&gt;#{pack $ show $ personAge person}
|]</codeblock>
  <p id="265-x-20">A few more notes:</p>
  <ul id="265-ul_4f926e00-4348-4801-97a1-a9d95fb18a04">
   <li id="265-x-21">The caret-interpolation (^{...}) takes a list of nodes, and so can easily embed
                other <codeph id="265-x-30">xml</codeph>-quotations.</li>
   <li id="265-x-22">Unlike Hamlet, hash-interpolations (#{...}) are not polymorphic, and can <i id="265-x-23">only</i> accept <codeph id="265-x-31">Text</codeph> values.</li>
  </ul>
 </conbody></concept><concept id="xml2html-266"><title>xml2html</title><conbody>
  <p id="266-x-3">So far in this chapter, our examples have revolved around XHTML. I've done that so far
   simply because it is likely to be the most familiar form of XML for most of our readers. But
   there's an ugly side to all this that we must acknowledge: not all XHTML will be correct HTML.
   The following discrepancies exist:</p>
  <ul id="266-ul_5c05f060-0943-46e4-96f3-b7c06feaf381">
   <li id="266-x-4">There are some void tags (e.g., <codeph id="266-x-24">img</codeph>, <codeph id="266-x-25">br</codeph>) in HTML
    which do not need to have close tags, and in fact are not allowed to.</li>
   <li id="266-x-5">HTML does not understand self-closing tags, so <codeph id="266-x-6">&lt;script&gt;&lt;/script&gt;</codeph> and
     <codeph id="266-x-7">&lt;script/&gt;</codeph> mean very different things.</li>
   <li id="266-x-8">Combining the previous two points: you are free to self-close void tags, though to a browser
    it won't mean anything.</li>
   <li id="266-x-9">In order to avoid quirks mode, you should start your HTML documents with a
     <codeph id="266-x-26">DOCTYPE</codeph> statement.</li>
   <li id="266-x-10">We do not want the XML declaration <codeph id="266-x-11">&lt;?xml ...?&gt;</codeph> at the top of an HTML
    page</li>
   <li id="266-x-12">We do not want any namespaces used in HTML, while XHTML is fully namespaced.</li>
   <li id="266-x-13">The contents of <codeph id="266-x-27">&lt;style&gt;</codeph> and <codeph id="266-x-28">&lt;script&gt;</codeph>
    tags should not be escaped.</li>
  </ul>
  <p id="266-x-14">That's where the <apiname id="266-x-15">xml2html</apiname> package comes into play. It provides a
    <apiname id="266-x-16">blaze-html:Text.Blaze:ToHtml</apiname> instance for <codeph id="266-x-17">Node</codeph>s,
    <codeph id="266-x-18">Document</codeph>s and <codeph id="266-x-19">Element</codeph>s. In order to use it, just import the
    <apiname id="266-x-20">xml2html:Text.XML.Xml2Html</apiname> module.</p>
  <codeblock id="266-x-21" outputclass="haskell">{-# LANGUAGE OverloadedStrings, QuasiQuotes #-}
import Text.Blaze (toHtml)
import Text.Blaze.Renderer.String (renderHtml)
import Text.XML
import Text.Hamlet.XML
import Text.XML.Xml2Html ()

main :: IO ()
main = putStr $ renderHtml $ toHtml $ Document (Prologue [] Nothing []) root []

root :: Element
root = Element "html" [] [xml|
&lt;head&gt;
    &lt;title&gt;Test
    &lt;script&gt;if (5 &lt; 6 || 8 &gt; 9) alert("Hello World!");
    &lt;style&gt;body &gt; h1 { color: red }
&lt;body&gt;
    &lt;h1&gt;Hello World!
|]</codeblock>
  <p id="266-x-22">Outputs: (whitespace added)</p>
  <codeblock id="266-x-23" outputclass="html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Test&lt;/title&gt;
        &lt;script&gt;if (5 &lt; 6 || 8 &gt; 9) alert("Hello World!");&lt;/script&gt;
        &lt;style&gt;body &gt; h1 { color: red }&lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Hello World!&lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;</codeblock>
 </conbody></concept></concept>