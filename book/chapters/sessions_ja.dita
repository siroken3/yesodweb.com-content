<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="sessions-105"><title>Sessions</title><conbody><p id="105-i1">HTTP is a stateless protocol. While some view this as a disadvantage, advocates of
            RESTful web development laud this as an plus. When state is removed from the picture, it
            is easier to scale applications, caching can happen automatically, and many other nice
            side effects occur. You can draw many parallels with the non-mutable nature of Haskell
            in general.</p>
        <p id="105-x-3">As much as possible, RESTful applications should avoid storing state about an interaction
            with a client. However, it is sometimes unavoidable. Features like shopping carts are
            the classic example, but other more mundane interactions like proper login handling can
            be greatly enhanced by proper usage of sessions.</p><p id="105-i2">This chapter will describe how Yesod stores session data,
            how you can access this data, and some special functions to help
            you make the most of sessions.</p></conbody><concept id="clientsession-106"><title>Clientsession</title><conbody><p id="106-cs1">One of the earliest packages spun off from Yesod was <apiname id="106-x1">clientsession</apiname>. This package uses encryption and signatures to store data
            in a client-side cookie. The encryption prevents the user from inspecting the data, and
            the signature ensures that the session can be neither hijacked nor tampered with.</p><p id="106-cs2">It might sound like a bad idea from an efficiency
            standpoint to store data in a cookie: after all, this means that
            the data must be sent on every request. However, in practice,
            clientsession can be a great boon for performance.</p><ul id="106-x2"><li id="106-x3">No server side database lookup is required to service a request.</li><li id="106-x4">We can easily scale horizontally: each request contains all the information we need to send a response.</li><li id="106-x5">To avoid undue bandwidth overhead, production sites can serve their static content from
                a separate domain name to avoid the overhead of transmitting the session cookie for
                each request.</li></ul><p id="106-cs3">Storing megabytes of information in the session will be a bad idea. But for that matter,
            most session implementations recommend against such practices. If you really need
            massive storage for a user, it is best to store a lookup key in the session, and put the
            actual data in a database.</p>
        <p id="106-x-3">All of the interaction with clientsession is handled by Yesod internally, but there are a
            few spots where you can tweak the behavior just a bit.</p></conbody></concept><concept id="controlling-sessions-107"><title>Controlling sessions</title><conbody><p id="107-c1">There are three functions in the Yesod typeclass that control how sessions work.
                <apiname id="107-x-3">yesod-core:Yesod.Core:encryptKey</apiname> returns the encryption key used.
            By default, it will take this from a local file, so that sessions can persist between
            database shutdowns. This file will be automatically created and filled with random data
            if it does not exist. And if you override this function to return <codeph id="107-x2">Nothing</codeph>, sessions will be disabled.</p><note id="107-x3" type="other" othertype="advanced"><p id="107-c2">Why disable sessions? They <b id="107-x4">do</b> introduce a
                performance overhead. Under normal circumstances, this overhead
                is minimal, especially compared to database access. However,
                when dealing with very basic tasks, the overhead can become
                noticeable. But be careful about disabling sessions: this will
                also disable such features as 
                    CSRF (Cross-Site Request Forgery) protection.</p></note><p id="107-c3">The next function is <apiname id="107-x-4">yesod-core:Yesod.Core:clientSessionDuration</apiname>. This function gives the
            number of minutes that a session should be active. The default is 120 (2 hours).</p><p id="107-c4">This value ends up affecting the session cookie in two ways:
            firstly, it determines the expiration date for the cookie itself.
            More importantly, however, the session expiration timestamp is
            encoded inside the session signature. When Yesod decodes the
            signature, it checks if the date is in the past; if so, it ignores
            the session values.</p><note id="107-x6" type="other" othertype="advanced"><p id="107-c5">Every time Yesod sends a response to the client, it
                sends an updated session cookie with a new expire date. This
                way, even if you do not change the session values themselves, a
                session will not time out if the user continues to browse your
                site.</p></note><p id="107-c6">And this leads very nicely to the last function: <apiname id="107-x-5">yesod-core:Yesod.Core:sessionIpAddress</apiname>. By default, Yesod also encodes
            the client's IP address inside the cookie to prevent session hijacking. In general, this
            is a good thing. However, some ISPs are known for putting their users behind proxies
            that rewrite their IP addresses, sometimes changing the source IP in the middle of the
            session. If this happens, and you have <codeph id="107-x-6">sessionIpAddress</codeph> enabled, the
            user's session will be reset. Turning this setting to <codeph id="107-x-7">False</codeph> will allow
            a session to continue under such circumstances, at the cost of exposing a user to
            session hijacking.</p></conbody></concept><concept id="session-operations-108"><title>Session Operations</title><conbody><p id="108-o1">Like most frameworks, a session in Yesod is a key-value store. The base session API boils
            down to four functions: <codeph id="108-x1">lookupSession</codeph> gets a value for a key
            (if available), <codeph>getSession</codeph> returns all of the key/value pairs, <codeph id="108-x2">setSession</codeph> sets a value for a key, and <codeph id="108-x3">deleteSession</codeph> clears a value for a key.</p><codeblock id="108-x4" outputclass="haskell">{-# LANGUAGE TypeFamilies, QuasiQuotes, TemplateHaskell, MultiParamTypeClasses, OverloadedStrings #-}
import Yesod
import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))
import qualified Web.ClientSession as CS

data SessionExample = SessionExample

mkYesod "SessionExample" [parseRoutes|
/ Root GET POST
|]

getRoot :: Handler RepHtml
getRoot = do
    sess &lt;- getSession
    hamletToRepHtml [hamlet|
&lt;form method=post&gt;
    &lt;input type=text name=key&gt;
    &lt;input type=text name=val&gt;
    &lt;input type=submit&gt;
&lt;h1&gt;#{show sess}
|]

postRoot :: Handler ()
postRoot = do
    (key, mval) &lt;- runInputPost $ (,) &lt;$&gt; ireq textField "key" &lt;*&gt; iopt textField "val"
    case mval of
        Nothing -&gt; deleteSession key
        Just val -&gt; setSession key val
    liftIO $ print (key, mval)
    redirect Root

instance Yesod SessionExample where
    -- Make the session timeout 1 minute so that it's easier to play with
    makeSessionBackend _ = do
        key &lt;- CS.getKey CS.defaultKeyFile
        return $ Just $ clientSessionBackend key 1

instance RenderMessage SessionExample FormMessage where
    renderMessage _ _ = defaultFormMessage

main :: IO ()
main = warpDebug 3000 SessionExample</codeblock></conbody></concept><concept id="messages-109"><title>Messages</title><conbody><p id="109-m1">One usage of sessions previously alluded to is messages. They come to solve a common
            problem in web development: the user performs a <codeph id="109-x-12">POST</codeph> request, the web
            app makes a change, and then the web app wants to <i id="109-x1">simultaneously</i> redirect
            the user to a new page and send the user a success message. (This is known as
            Post/Redirect/Get.)</p><p id="109-m2">Yesod provides a pair of functions to make this very easy:
            <codeph id="109-x2">setMessage</codeph> stores a value in the session, and
            <codeph id="109-x3">getMessage</codeph> both reads the value most recently put into
            the session, and clears the old value so it does not accidently get
            displayed twice.</p><p id="109-m3">It is recommended to have a call to <codeph id="109-x-13">getMessage</codeph> in <codeph id="109-x4">defaultLayout</codeph> so that any available message is shown to a user
            immediately, without having to remember to add <codeph id="109-x-14">getMessage</codeph> calls to
            every handler.</p>
        <codeblock id="109-x-3" outputclass="haskell">{-# LANGUAGE OverloadedStrings, TypeFamilies, TemplateHaskell,
             QuasiQuotes, MultiParamTypeClasses #-}
import Yesod

data Messages = Messages

mkYesod "Messages" [parseRoutes|
/ RootR GET
/set-message SetMessageR POST
|]

instance Yesod Messages where
    defaultLayout widget = do
        pc &lt;- widgetToPageContent widget
        mmsg &lt;- getMessage
        hamletToRepHtml [hamlet|
$doctype 5
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;#{pageTitle pc}
        ^{pageHead pc}
    &lt;body&gt;
        $maybe msg &lt;- mmsg
            &lt;p&gt;Your message was: #{msg}
        ^{pageBody pc}
|]

instance RenderMessage Messages FormMessage where
    renderMessage _ _ = defaultFormMessage

getRootR :: Handler RepHtml
getRootR = defaultLayout [whamlet|
&lt;form method=post action=@{SetMessageR}&gt;
    My message is: #
    &lt;input type=text name=message&gt;
    &lt;input type=submit&gt;
|]

postSetMessageR :: Handler ()
postSetMessageR = do
    msg &lt;- runInputPost $ ireq textField "message"
    setMessage $ toHtml msg
    redirect RootR

main :: IO ()
main = warpDebug 3000 Messages</codeblock>
        <fig id="109-x-4">
            <title id="109-x-5">Initial page load, no message</title>
            <image href="../images/messages-1.png" id="109-image_oka_gxb_yd"/>
        </fig>
        <fig id="109-x-6">
            <title id="109-x-7">New message entered in text box</title>
            <image href="../images/messages-2.png" id="109-image_bqu_hxb_yd"/>
        </fig>
        <fig id="109-x-8">
            <title id="109-x-9">After form submit, message appears at top of page</title>
            <image href="../images/messages-3.png" id="109-image_qhn_jxb_yd"/>
        </fig>
        <fig id="109-x-10">
            <title id="109-x-11">After refresh, the message is cleared</title>
            <image href="../images/messages-4.png" id="109-image_sjp_kxb_yd"/>
        </fig></conbody></concept><concept id="ultimate-destination-110"><title>Ultimate Destination</title><conbody><p id="110-u1">Not to be confused with a horror film, this concept is used internally in <apiname id="110-x1">yesod-auth</apiname>. Suppose a user requests a page that requires
            authentication. If the user is not yet logged in, you need to send him/her to the login
            page. A well-designed web app will then <i id="110-x2">send them back to the first page they
                requested</i>. That's what we call the ultimate destination.</p><p id="110-u2"><codeph id="110-x3">redirectUltDest</codeph> sends the user to the ultimate destination set
            in his/her session, clearing that value from the session. It takes a default destination
            as well, in case there is no destination set. For setting the session, there are three
                options:<ul id="110-ul_pms_cyz_ze">
                <li id="110-x-3"><codeph id="110-x4">setUltDest</codeph> sets the destination to the given URL</li>
                <li id="110-x-4"><codeph id="110-x6">setUltDestCurrent</codeph> sets the destination to the currently
                    requested URL.</li>
                <li id="110-x-5"><codeph id="110-x-6">setUltDestReferer</codeph> sets the destination based on the
                        <codeph id="110-x-7">Referer</codeph> header (the page that led the user to the current
                    page).</li>
            </ul></p>
        <p>Let's look at a small sample app. It will allow the user to set his/her name in the
            session, and then tell the user his/her name from another route. If the name hasn't been
            set yet, the user will be redirected to the set name page, with an ultimate destination
            set to come back to the current page.</p>
        <codeblock outputclass="haskell">{-# LANGUAGE OverloadedStrings, TypeFamilies, TemplateHaskell,
             QuasiQuotes, MultiParamTypeClasses #-}
import Yesod

data UltDest = UltDest

mkYesod "UltDest" [parseRoutes|
/ RootR GET
/setname SetNameR GET POST
/sayhello SayHelloR GET
|]

instance Yesod UltDest

instance RenderMessage UltDest FormMessage where
    renderMessage _ _ = defaultFormMessage

getRootR = defaultLayout [whamlet|
&lt;p&gt;
    &lt;a href=@{SetNameR}&gt;Set your name
&lt;p&gt;
    &lt;a href=@{SayHelloR}&gt;Say hello
|]

-- Display the set name form
getSetNameR = defaultLayout [whamlet|
&lt;form method=post&gt;
    My name is #
    &lt;input type=text name=name&gt;
    . #
    &lt;input type=submit value="Set name"&gt;
|]

-- Retreive the submitted name from the user
postSetNameR :: Handler ()
postSetNameR = do
    -- Get the submitted name and set it in the session
    name &lt;- runInputPost $ ireq textField "name"
    setSession "name" name

    -- After we get a name, redirect to the ultimate destination.
    -- If no destination is set, default to the homepage
    redirectUltDest RootR

getSayHelloR = do
    -- Lookup the name value set in the session
    mname &lt;- lookupSession "name"
    case mname of
        Nothing -&gt; do
            -- No name in the session, set the current page as
            -- the ultimate destination and redirect to the
            -- SetName page
            setUltDestCurrent
            setMessage "Please tell me your name"
            redirect SetNameR
        Just name -&gt; defaultLayout [whamlet|
&lt;p&gt;Welcome #{name}
|]

main :: IO ()
main = warpDebug 3000 UltDest</codeblock></conbody></concept><concept id="summary-111"><title>Summary</title><conbody>
        <p id="111-x-3">Sessions are the number one way we bypass the statelessness imposed by HTTP. We
            shouldn't consider this an escape hatch to perform whatever actions we want:
            statelessness in web applications is a virtue, and we should respect it whenever
            possible. However, there are specific cases where it is vital to retain some state.</p><p id="111-s1">The session API in Yesod is very simple. It provides a key-value store, and a few
            convenience functions built on top for common use cases. If used properly, with small
            payloads, sessions should be an unobtrusive part of your web development.</p></conbody></concept></concept>